require('torch')
package.path = '../?.lua;' .. package.path
require('../data')
require("nn")
require('rnn')
require("nngraph")

function printw(t, dict)
   print(t:size(1))
   for i=1,t:size(1) do
      io.write(dict[t[i]] .. " ")
   end
   io.write("\n")
end

cmd = torch.CmdLine()

cmd:text()
cmd:text('Stat')
cmd:text()
cmd:text()
cmd:text('Misc options:')
cmd:option('-dir', '.', 'subdirectory to save the stuff')
cmd:option('-maxload', math.huge, 'data to load')
cmd:option('-maxsize', math.huge, 'sentencesizemax')
cmd:option('-mobius', false, 'run on mobius')
cmd:option('-corpus', '{full}', 'corpus to use')
cmd:option('-parser', 'stanford', 'parser to use (stanford or McClosky)')
cmd:option('-anon', false, 'anonymize drugs')
cmd:option('-fusr', '{}', 'fusion relations for the additional corpus')
cmd:option('-pfsz', 0, 'pos tag features size')
cmd:option('-wsz', 1, 'pos tag features size')
cmd:option('-dtfsz', 1, 'pos tag features size')
cmd:text()

local params = cmd:parse(arg)

params.corpus = params.corpus:gsub("{", "{\"")
params.corpus = params.corpus:gsub("}", "\"}")
params.corpus = params.corpus:gsub(" +", "")
params.corpus = params.corpus:gsub(",", "\",\"")
if params.fusr~="{}" then
   params.fusr = params.fusr:gsub("{", "{\"")
   params.fusr = params.fusr:gsub("}", "\"}")
   params.fusr = params.fusr:gsub(" +", "")
   params.fusr = params.fusr:gsub(",", "\",\"")
end
params.corpus = loadstring("return " .. params.corpus)()
params.fusr = loadstring("return " .. params.fusr)()
params.arch=4

--loading hashes
for i=1,#params.corpus do
   print(params.corpus[i])
   loadhash(params, params.corpus[i])
end

treelstm = {}
include("../treeLSTM/util/Tree.lua")
--include('../treeLSTM/layers/CRowAddTable.lua')
--include('../treeLSTM/models/LSTM.lua')
--include('../treeLSTM/models/TreeLSTM.lua')
--include('../treeLSTM/models/ChildSumTreeLSTM.lua')

local datas = {}
for i=1,#params.corpus do
   local data = createdata(params, params.corpus[i], "train")
   table.insert(datas, data)
end

local test_datas = {}
for i=1,#params.corpus do
   local test_data = createdata(params, params.corpus[i], "test")
   table.insert(test_datas, test_data)
end


